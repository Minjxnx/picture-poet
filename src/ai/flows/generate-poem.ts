// This file is generated by Firebase Studio.
"use server";

/**
 * @fileOverview Generates a poem based on the analysis of an image.
 *
 * - generatePoem - A function that handles the poem generation process.
 * - GeneratePoemInput - The input type for the generatePoem function.
 * - GeneratePoemOutput - The return type for the generatePoem function.
 */

import { ai } from "@/ai/genkit";
import { z } from "genkit";

const GeneratePoemInputSchema = z.object({
  photoDataUri: z
    .string()
    .describe(
      "A photo to inspire the poem, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.",
    ),
  poetryStyle: z
    .string()
    .describe("The style of poetry to use, e.g., haiku, sonnet, free verse."),
  imageAnalysis: z
    .string()
    .describe(
      "The AI-generated analysis of the image content and themes. This analysis will be in the target language.",
    ),
  language: z
    .string()
    .describe(
      'The target language for the poem, e.g., "Spanish", "French", "English".',
    ),
});
export type GeneratePoemInput = z.infer<typeof GeneratePoemInputSchema>;

const GeneratePoemOutputSchema = z.object({
  poem: z.string().describe("The generated poem, in the specified language."),
});
export type GeneratePoemOutput = z.infer<typeof GeneratePoemOutputSchema>;

export async function generatePoem(
  input: GeneratePoemInput,
): Promise<GeneratePoemOutput> {
  return generatePoemFlow(input);
}

const poemPrompt = ai.definePrompt({
  name: "poemPrompt",
  input: { schema: GeneratePoemInputSchema },
  output: { schema: GeneratePoemOutputSchema },
  prompt: `You are a skilled poet. Your task is to write a poem.
The poem should be inspired by the provided image analysis and written in the specified poetry style and language.
The image analysis you receive is already in the target language: {{{language}}}.

Image Analysis (in {{{language}}}): {{{imageAnalysis}}}
Poetry Style: {{{poetryStyle}}}
Language for Poem: {{{language}}}

Please generate the poem below in {{{language}}}:
Poem: `,
});

const generatePoemFlow = ai.defineFlow(
  {
    name: "generatePoemFlow",
    inputSchema: GeneratePoemInputSchema,
    outputSchema: GeneratePoemOutputSchema,
  },
  async (input) => {
    const { output } = await poemPrompt(input);
    return output!;
  },
);
